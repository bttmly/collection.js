// Generated by CoffeeScript 1.6.3
(function() {
  var hub;

  hub = $({});

  $.getJSON("data.json", function(data) {
    var e;
    e = $.Event("jsonComplete");
    e.jsonData = data;
    return hub.trigger(e);
  });

  hub.on("jsonComplete", function(event) {
    var checkArrayEquality, checkCollectionEquality, cloner, data, fail, methods, pass, test;
    console.log("rock and roll...");
    data = event.jsonData;
    window.vanillaCollection = data;
    window.barebonesCollection = new Barebones.Collection(data);
    methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl', 'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke', 'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest', 'tail', 'drop', 'last', 'without', 'indexOf', 'shuffle', 'lastIndexOf', 'isEmpty', 'chain'];
    cloner = function() {
      var result;
      result = [];
      result.push($.extend(true, {}, vanillaCollection));
      result.push(new Barebones.Collection(data));
      return result;
    };
    checkCollectionEquality = function(col1, col2) {
      var i, model, result, _i, _len;
      result = true;
      for (i = _i = 0, _len = col1.length; _i < _len; i = ++_i) {
        model = col1[i];
        if (col1[i] !== col2[i]) {
          result = false;
          console.log(col1[i]);
          console.log(col2[i]);
          break;
        }
      }
      return result;
    };
    checkArrayEquality = function(arr1, arr2) {
      var i, name, result, _i, _len;
      result = true;
      for (i = _i = 0, _len = arr1.length; _i < _len; i = ++_i) {
        name = arr1[i];
        if (arr1[i] !== arr2[i]) {
          result = false;
          console.log(arr1[i]);
          console.log(arr2[i]);
          break;
        }
      }
      return result;
    };
    window.tests = {
      forEach: (function() {
        var b, test, v, _ref;
        _ref = cloner(), v = _ref[0], b = _ref[1];
        test = function(model) {
          return model.testProp = "just a test";
        };
        _.each(v, test);
        b.each(test);
        b = b.arrayify();
        return checkCollectionEquality(b, v);
      })(),
      map: (function() {
        var b, bmap, test, v, vmap, _ref;
        _ref = cloner(), v = _ref[0], b = _ref[1];
        test = function(model) {
          return model.name;
        };
        vmap = _.map(v, test);
        bmap = b.map(test);
        return checkArrayEquality(bmap, vmap);
      })(),
      reduce: (function() {
        var b, breduce, test, v, vreduce, _ref;
        _ref = cloner(), v = _ref[0], b = _ref[1];
        test = function(memo, model) {
          return memo + model.scrimYds;
        };
        vreduce = _.reduce(v, test, 0);
        breduce = b.reduce(test, 0);
        if (vreduce === breduce) {
          return true;
        } else {
          return false;
        }
      })(),
      reduceRight: (function() {
        var b, breduce, test, v, vreduce, _ref;
        _ref = cloner(), v = _ref[0], b = _ref[1];
        test = function(memo, model) {
          return memo + model.passYds;
        };
        vreduce = _.reduceRight(v, test, 0);
        breduce = b.reduceRight(test, 0);
        if (vreduce === breduce) {
          return true;
        } else {
          return false;
        }
      })()
    };
    fail = false;
    for (test in tests) {
      pass = tests[test];
      if (!pass) {
        console.log(test);
        fail = true;
      }
    }
    if (fail === false) {
      return console.log(tests);
    }
  });

}).call(this);
