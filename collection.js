// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(root, factory) {
    var _;
    if (typeof define === "function" && define.amd) {
      define(["lodash", "exports"], function(_, exports) {
        root.Collection = factory(root, exports, _);
      });
    } else if (typeof exports !== "undefined") {
      _ = require("lodash");
      factory(root, exports, _);
    } else {
      root.Collection = factory(root, {}, root._);
    }
  })(this, function(root, Collection, _) {
    var addArg, method, notReturnsCollectionMethods, previousCollection, returnsCollectionMethods, slice, _fn, _fn1, _i, _j, _len, _len1;
    previousCollection = root.Collection;
    slice = Array.prototype.slice.call.bind(Array.prototype.slice);
    addArg = function(arg, args) {
      args = slice(args);
      args.unshift(arg);
      return args;
    };
    Collection = (function(_super) {
      __extends(Collection, _super);

      function Collection(models, options) {
        var model, _i, _len;
        options || (options = {});
        if (models) {
          for (_i = 0, _len = models.length; _i < _len; _i++) {
            model = models[_i];
            if (options.init) {
              model = (function(m) {
                return options.init(m);
              })(model);
            }
            this.push(model);
          }
        }
      }

      Collection.prototype.slice = function() {
        return new Collection(Collection.__super__.slice.call(this, arguments));
      };

      Collection.prototype.splice = function() {
        return new Collection(Collection.__super__.splice.call(this, arguments));
      };

      Collection.prototype.groupBy = function() {
        var col, groups, key;
        groups = _.groupBy(addArg(this, arguments));
        for (key in groups) {
          col = groups[key];
          groups[key] = new Collection(col);
        }
        return groups;
      };

      return Collection;

    })(Array);
    returnsCollectionMethods = ['forEach', 'each', 'eachRight', 'forEachRight', 'map', 'collect', 'filter', 'select', 'where', 'pluck', 'reject', 'invoke', 'initial', 'rest', 'tail', 'drop', 'compact', 'flatten', 'without', 'shuffle', 'remove', 'transform', 'unique', 'uniq', 'union', 'intersection', 'difference'];
    notReturnsCollectionMethods = ['reduce', 'foldl', 'inject', 'reduceRight', 'foldr', 'find', 'detect', 'findWhere', 'every', 'all', 'some', 'any', 'contains', 'max', 'min', 'include', 'size', 'first', 'last', 'indexOf', 'lastIndexOf', 'isEmpty', 'toArray', 'at', 'findLast', 'indexBy', 'sortBy', 'countBy'];
    _fn = function(method) {
      if (_[method]) {
        Collection.prototype[method] = function() {
          return new Collection(_[method].apply(_, addArg(this, arguments)));
        };
      }
    };
    for (_i = 0, _len = returnsCollectionMethods.length; _i < _len; _i++) {
      method = returnsCollectionMethods[_i];
      _fn(method);
    }
    _fn1 = function(method) {
      if (_[method]) {
        Collection.prototype[method] = function() {
          return _[method].apply(_, addArg(this, arguments));
        };
      }
    };
    for (_j = 0, _len1 = notReturnsCollectionMethods.length; _j < _len1; _j++) {
      method = notReturnsCollectionMethods[_j];
      _fn1(method);
    }
    Collection.noConflict = function() {
      root.Collection = previousCollection;
      return this;
    };
    return Collection;
  });

}).call(this);
