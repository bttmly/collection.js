// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var factory;

  factory = function(root, Barebones, _) {
    var Collection, Model, array, attributeMethods, collectionMethods, lib, nativeMethods, push, returnsCollectionMethods, slice, splice, unshift;
    lib = _.noop ? "lodash" : "underscore";
    array = [];
    push = array.push;
    slice = array.slice;
    splice = array.splice;
    unshift = array.unshift;
    Model = (function() {
      function Model(model) {
        var prop, val;
        for (prop in model) {
          val = model[prop];
          this[prop] = val;
        }
      }

      return Model;

    })();
    Collection = (function() {
      function Collection(models, options) {
        var model, _i, _len;
        options || (options = {});
        if (options.model) {
          this.model = options.model;
        }
        this.models = [];
        for (_i = 0, _len = models.length; _i < _len; _i++) {
          model = models[_i];
          this.push(model);
        }
        this.initialize.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.length = function() {
        return this.models.length;
      };

      Collection.prototype.push = function(model) {
        return this.models.push(this._prepareModel(model));
      };

      Collection.prototype.unshift = function(model) {
        return this.models.unshift(this._prepareModel(model));
      };

      Collection.prototype.concat = function(arrayOfModels) {
        var model, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = aarayOfModels.length; _i < _len; _i++) {
          model = aarayOfModels[_i];
          _results.push(this.push(model));
        }
        return _results;
      };

      Collection.prototype._prepareModel = function(model) {
        if (!(model instanceof this.model)) {
          model = new this.model(model);
        }
        return model;
      };

      Collection.prototype.initialize = function() {};

      return Collection;

    })();
    collectionMethods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl', 'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke', 'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest', 'tail', 'drop', 'last', 'without', 'indexOf', 'shuffle', 'lastIndexOf', 'isEmpty', 'chain'];
    collectionMethods = collectionMethods.concat('pluck', 'where', 'findWhere');
    if (lib === "lodash") {
      collectionMethods = collectionMethods.concat('at', 'eachRight', 'forEachRight', 'findLast');
    }
    _.each(collectionMethods, function(method) {
      Collection.prototype[method] = function() {
        var args;
        args = [].slice.call(arguments);
        args.unshift(this.models);
        return _[method].apply(_, args);
      };
    });
    attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];
    _.each(attributeMethods, function(method) {
      Collection.prototype[method] = function(value, context) {
        var iterator;
        iterator = _.isFunction(value) ? value : function(model) {
          return model[value];
        };
        return _[method](this.models, iterator, context);
      };
    });
    nativeMethods = ['slice', 'splice', 'shift', 'pop', 'join', 'reverse', 'sort'];
    _.each(nativeMethods, function(method) {
      Collection.prototype[method] = function() {
        var args;
        args = slice.call(arguments);
        args.unshift(this.models);
        return Array.prototype[method].apply(this.models, arguments);
      };
    });
    returnsCollectionMethods = ['filter', 'where', 'reject'];
    _.each(returnsCollectionMethods, function(method) {
      var methodName;
      methodName = "col" + method.charAt(0).toUpperCase() + method.slice(1);
      Collection.prototype[methodName] = function() {
        var args, collection, constructor;
        constructor = Object.getPrototypeOf(this).constructor;
        args = [].slice.call(arguments);
        args.unshift(this.models);
        collection = _[method].apply(_, args);
        console.log(collection.length);
        return new constructor(collection);
      };
    });
    return {
      Model: Model,
      Collection: Collection
    };
  };

  (function(root, factory) {
    var _;
    if (typeof define === "function" && define.amd) {
      define(["underscore", "exports"], function(_, exports) {
        root.Barebones = factory(root, exports, _);
      });
    } else if (typeof exports !== "undefined") {
      _ = require("lodash") || require("underscore");
      factory(root, exports, _);
    } else {
      root.Barebones = factory(root, {}, root._);
    }
  })(this, factory);

}).call(this);
